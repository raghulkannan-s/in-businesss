generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  owner
  admin
  manager
  user
}

enum MatchStatus {
  scheduled
  live
  completed
}

enum OptedTo {
  bat
  bowl
}

model User {
  id          Int        @id @default(autoincrement())
  name        String
  email       String     @unique
  role        UserRole   @default(user)
  phone       String     @unique
  address     String
  password    String
  eligibility Boolean    @default(true)
  inScore     Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  teamId      String?
  team        Team?      @relation(fields: [teamId], references: [id])
  batsman     Batsman?
  bowler      Bowler?
  products    Product[] @relation("createdByRelation")
  scores      Score[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String   @default("Placeholder description")
  price       Float    @default(0)
  stock       Int      @default(0)
  category    String   @default("General")
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int
  createdByUser        User     @relation( "createdByRelation", fields: [createdBy], references: [id])
}

model Team {
  id      String    @id @default(uuid())
  name    String
  logo    String?
  players User[]
  matchesAsTeamA Match[] @relation("TeamA")
  matchesAsTeamB Match[] @relation("TeamB")
  matchesWon     Match[] @relation("WinnerTeam")
}

model Match {
  id        String       @id @default(uuid())
  title     String
  status    MatchStatus
  tossWonBy String?
  optedTo   OptedTo?
  overs     Int?
  teamAId   String
  teamBId   String
  winnerId  String?
  teamA     Team         @relation("TeamA", fields: [teamAId], references: [id])
  teamB     Team         @relation("TeamB", fields: [teamBId], references: [id])
  winner    Team?        @relation("WinnerTeam", fields: [winnerId], references: [id])
  scores    Score[]
  createdAt DateTime     @default(now())
}

model Score {
  id        String   @id @default(uuid())
  matchId   String
  playerId  Int
  runs      Int
  balls     Int
  fours     Int
  sixes     Int
  isOut     Boolean
  over      Int
  match     Match    @relation(fields: [matchId], references: [id])
  player    User     @relation(fields: [playerId], references: [id])
  createdAt DateTime @default(now())
}

model Batsman {
  id           String @id @default(uuid())
  userId       Int    @unique
  totalRuns    Int
  totalFours   Int
  totalSixes   Int
  totalMatches Int
  user         User   @relation(fields: [userId], references: [id])
}

model Bowler {
  id           String @id @default(uuid())
  userId       Int    @unique
  totalWickets Int
  totalMatches Int
  user         User   @relation(fields: [userId], references: [id])
}
